// src/instr_mem.veryl

module InstrMem (
    i_addr : input  logic<32>,
    o_instr: output logic<32>,
) {
    always_comb {
        case i_addr {
            // prog.s
            32'h0000_0000: o_instr = 32'b001000_00000_00010_0000000000000000; // addi r2, zero, 0 [r2 <- 0]
            32'h0000_0004: o_instr = 32'b001000_00000_00011_0000000000100100; // addi r3, zero, 36 [r3 <- 36]
            //Each inner loop iteration is two instructions. 36*2*32767 ~ 2.4M
            // Default clock frequency is 2.4MHz, so outer loop will iterate about once a second.
            32'h0000_0008: o_instr = 32'b001000_00000_00001_0000000000000001; // addi r1, zero, 0 [r1 <- 0]
            // setup:
            32'h0000_000c: o_instr = 32'b001000_00010_00010_0111111111111111; // addi r2, r2, 32767 [r2 <- r2 + 32767] (32767 is i16 MAX)
            32'h0000_0010: o_instr = 32'b001000_00011_00011_1111111111111111; // addi r3, r3,   -1 [r3 <- r3 - 1]
            32'h0000_0014: o_instr = 32'b000101_00011_00000_1111111111111101; // bne  r3, zero, -3 <setup> (iterate 36 times)
            32'h0000_0018: o_instr = 32'b000000_00010_00000_0001100000100000; // add  r3, r2,    0 [r3 <- 1.2M] (at this point r2 ~ 2.4M)
            // loop_outer:
            32'h0000_001c: o_instr = 32'b000000_00011_00000_0001000000100000; // add  r2, r3, zero [r2 <- 1.2M] (reset the down counter)
            // loop_inner:
            32'h0000_0020: o_instr = 32'b001000_00010_00010_1111111111111111; // add  r2, r2,   -1 (count down by one)
            32'h0000_0024: o_instr = 32'b000101_00010_00000_1111111111111110; // bne  r2, zero, -2 <loop_inner> (will iterate 1.2M times)
            32'h0000_0028: o_instr = 32'b000101_00001_00000_0000000000000010; // bne  r1, zero,  2  <set_zero>  if r1 is not zero...
            32'h0000_002c: o_instr = 32'b001000_00001_00001_0000000000000001; // addi r1, r1,    1 [r1 <- 1] otherwise, set it to one.
            32'h0000_0030: o_instr = 32'b000101_00011_00000_1111111111111010; // bne  r3, zero, -6 <loop_outer>(infallible) then branch back
            //set_zero
            32'h0000_0034: o_instr = 32'b001000_00000_00001_0000000000000000; // addi r1, zero,  0 [r1<-0]...set it to zero
            32'h0000_0038: o_instr = 32'b000101_00011_00000_1111111111111000; // bne  r3, zero, -8 <loop_outer>(infallible) then branch back

            default: o_instr = 32'b111111_00001_00000_0000000000000001; //   30 lui  zero 1      (-- not supported, unreachable --)
        }
    }
}


//
#[test(instr_mem)]
embed (inline) sv{{{
    module test;
        logic [31:0] addr;
        logic [31:0] instr;

        vips_InstrMem instr_mem(addr, instr);

        logic [5:0] op;
        logic [5:0] funct;
        logic [4:0] rs;
        logic [4:0] rt;
        logic [4:0] rd;
        logic [15:0] imm;

        always_comb begin
            op = instr[31:26];
            rs = instr[25:21];
            rt = instr[20:16];
            rd = instr[15:11]; // r-type
            imm = instr[15:0]; // i-type
            funct = instr[5:0];
        end

        initial begin
            
            for ( addr = 0; addr < 'h34; addr = addr + 4) begin
	            #10;
            end
            
            $finish;
        end
    endmodule
}}}
