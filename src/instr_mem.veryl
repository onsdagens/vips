// src/instr_mem.veryl

module InstrMem (
    i_addr : input  logic<32>,
    o_instr: output logic<32>,
) {
    always_comb {
        case i_addr {
            // prog_2.s
            // prog.s
            32'h0000_0000: o_instr = 32'b001000_00000_00010_0000000000000000; // addi $
            32'h0000_0004: o_instr = 32'b001000_00000_00011_0000000000100100;
            32'h0000_0008: o_instr = 32'b001000_00000_00001_0000000000000001;
            32'h0000_000c: o_instr = 32'b001000_00010_00010_0111111111111111;
            32'h0000_0010: o_instr = 32'b001000_00011_00011_1111111111111111;
            32'h0000_0014: o_instr = 32'b000101_00011_00000_1111111111111101;
            32'h0000_0018: o_instr = 32'b000000_00010_00000_0001100000100000;
            32'h0000_001c: o_instr = 32'b000000_00011_00000_0001000000100000;
            32'h0000_0020: o_instr = 32'b001000_00010_00010_1111111111111111;
            32'h0000_0024: o_instr = 32'b000101_00010_00000_1111111111111110;
            32'h0000_0028: o_instr = 32'b000101_00001_00000_0000000000000010;
            32'h0000_002c: o_instr = 32'b001000_00001_00001_0000000000000001;
            32'h0000_0030: o_instr = 32'b000101_00011_00000_1111111111111010;
            32'h0000_0034: o_instr = 32'b001000_00000_00001_0000000000000000;
            32'h0000_0038: o_instr = 32'b000101_00011_00000_1111111111111000;
            default      : o_instr = 32'b111111_00001_00000_0000000000000001; //   30 lui  zero 1      (-- not supported --)
        }
    }
}


//
#[test(instr_mem)]
embed (inline) sv{{{
    module test;
        logic [31:0] addr;
        logic [31:0] instr;

        vips_InstrMem instr_mem(addr, instr);

        logic [5:0] op;
        logic [5:0] funct;
        logic [4:0] rs;
        logic [4:0] rt;
        logic [4:0] rd;
        logic [15:0] imm;

        always_comb begin
            op = instr[31:26];
            rs = instr[25:21];
            rt = instr[20:16];
            rd = instr[15:11]; // r-type
            imm = instr[15:0]; // i-type
            funct = instr[5:0];
        end

        initial begin
            
            for ( addr = 0; addr < 'h34; addr = addr + 4) begin
	            #10;
            end
            
            $finish;
        end
    endmodule
}}}
