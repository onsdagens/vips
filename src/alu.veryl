module Alu #(
    param Width: u32 = 32,
) (
    a  : input  logic<Width>,
    b  : input  logic<Width>,
    sub: input  logic       ,
    op : input  logic<2>    ,
    r  : output logic<Width>,
    v  : output logic       ,
    c  : output logic       ,
    z  : output logic       ,
) {
    /* verilator lint_off UNOPTFLAT */
    var sum       : logic<Width>;
    var extend_in : logic       ;
    var extend_out: logic<Width>;
    var a_and_b   : logic<Width>;
    var a_or_b    : logic<Width>;

    inst arith: Arith #(
        Width  ,
    ) (
        a       ,
        b       ,
        sub     ,
        r  : sum,
        v       ,
        c       ,
    );

    assign z         = r == 0;
    assign extend_in = sum[msb] ^ v;

    inst zero_extend: ZeroExtend #(
        Width  ,
    ) (
        i: extend_in ,
        o: extend_out,
    );

    assign a_and_b = a & b;
    assign a_or_b  = a | b;

    // sub alu opration code
    // 0   00 and
    // 0   01 or
    // 0   10 add 
    // 1   10 sub
    // 1   11 slt
    inst mux: Mux4 #(
        Width  ,
    ) (
        i: {a_and_b, a_or_b, sum, extend_out},
        s: op                                ,
        o: r                                 ,
    );
    /* verilator lint_off UNOPTFLAT */
}
